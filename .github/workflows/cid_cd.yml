name: CI/CD

on:
  push:
    branches: [main, dev]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  integration:
    runs-on: ubuntu-latest
    env:
      GIT_SHA: ${{ github.sha }}

    services:
      pcts-scrapers-postgres:
        image: postgres:13

        env:
          POSTGRES_HOST: pcts-scrapers-postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test1234
          POSTGRES_DB: pcts_scrapers

        options: >-
          --name pcts-scrapers-postgres
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Stylesheet check
        run: echo 'stylesheet check'

      - name: Build image
        run: docker build -t pcts-scrapers-api .

      - name: Run Scrapers tests
        run: |
          docker run\
            --volume ${PWD}/:/app\
            --env PROJECT_ENV_EXECUTOR="DOCKER"\
            --env PCTS_SCRAPERS_SPLASH_HOST=http://pcts-scrapers-splash:8050\
            --env PCTS_DOCUMENTS_API_URL=http://pcts-documents:8000\
            --env PCTS_DOCUMENTS_API_RECORDS_ENDPOINT=api/documents/\
            --env POSTGRES_HOST=pcts-scrapers-postgres\
            --env POSTGRES_PORT=5432\
            --env POSTGRES_USER=postgres\
            --env POSTGRES_PASSWORD=test1234\
            --env POSTGRES_DB=pcts_scrapers\
            --env ENVIRONMENT=development\
            --env ALLOWED_HOSTS=*\
            --env DJANGO_SUPERUSER_EMAIL=admin@example.com\
            --env DJANGO_SUPERUSER_USERNAME=admin\
            --env DJANGO_SUPERUSER_PASSWORD=admin\
            --env CELERY_BROKER_URL=amqp:"//guest@pcts-scrapers-rabbitmq:5672"\
            --volume ${PWD}/:/app\
            --network ${{ job.container.network }}\
            pcts-scrapers-api bash -c\
            "coverage run -m unittest discover && coverage xml -o coverage_scrapers.xml"

      - name: Run API tests
        run: |
          docker run\
            --volume ${PWD}/:/app\
            --env PROJECT_ENV_EXECUTOR="DOCKER"\
            --env PCTS_SCRAPERS_SPLASH_HOST=http://pcts-scrapers-splash:8050\
            --env PCTS_DOCUMENTS_API_URL=http://pcts-documents:8000\
            --env PCTS_DOCUMENTS_API_RECORDS_ENDPOINT=api/documents/\
            --env POSTGRES_HOST=pcts-scrapers-postgres\
            --env POSTGRES_PORT=5432\
            --env POSTGRES_USER=postgres\
            --env POSTGRES_PASSWORD=test1234\
            --env POSTGRES_DB=pcts_scrapers\
            --env ENVIRONMENT=development\
            --env ALLOWED_HOSTS=*\
            --env DJANGO_SUPERUSER_EMAIL=admin@example.com\
            --env DJANGO_SUPERUSER_USERNAME=admin\
            --env DJANGO_SUPERUSER_PASSWORD=admin\
            --env CELERY_BROKER_URL=amqp:"//guest@pcts-scrapers-rabbitmq:5672"\
            --volume ${PWD}/:/app\
            --network ${{ job.container.network }}\
            pcts-scrapers-api bash -c\
            "python manage.py migrate &&\
            coverage run --source='pcts_scrapers_api/' -m unittest discover && coverage xml -o coverage_api.xml"

      - name: SonarCloud Report coverage
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy_dev:
    if: github.ref == 'refs/heads/dev'
    needs: integration
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_APP_NAME_DEV: ${{ 'pcts-scrapers-dev' }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Heroku login credentials
        run: |
          cat > ~/.netrc <<EOF
            machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
            machine git.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
          EOF

      - name: Deploy to Heroku DEV
        run: |
          heroku git:remote -a $HEROKU_APP_NAME_DEV
          git push heroku HEAD:main

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    needs: integration
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_APP_NAME_PROD: ${{ 'pcts-scrapers-prod' }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Heroku login credentials
        run: |
          cat > ~/.netrc <<EOF
            machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
            machine git.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
          EOF

      - name: Deploy to Heroku PROD
        run: |
          heroku git:remote -a $HEROKU_APP_NAME_PROD
          git push heroku HEAD:main
